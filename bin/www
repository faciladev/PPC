#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
// var debug = require('debug')('api:server');
var http = require('http');
var errorHandler = require('../error_handler');
var logger = require('../logger');
var DbHelper = require('../lib/DbHelper');
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  // debug('Listening on ' + bind);
  logger.info('Listening on ' + bind);
}

process.on('SIGINT', function() {
  DbHelper.closeAllConnections().then(
    function(success){
      logger.info('Closed all db connections');
      process.exit(0);
    },
    function(err){
      logger.error('Could not close all db connections.')
      logger.error(err);
      process.exit(1);
    }
  );
});

process.on('message', function(msg) {
  if (msg == 'shutdown') {
    DbHelper.closeAllConnections().then(
      function(success){
        logger.info('Closed all db connections');
        process.exit(0);
      },
      function(err){
        logger.error('Could not close all db connections.')
        logger.error(err);
        process.exit(1);
      }
    );
  }
});

process.on('uncaughtException', function(error) {
  error.severe = true;
  errorHandler.handleError(error, 
    function(isOperationalError){
      if(! isOperationalError){
        process.exit(1);
    }
  });
  
});

process.on('unhandledRejection', function (reason, p) {
  throw reason;
});

process.on('warning', (warning) => {
  logger.error(warning);
});