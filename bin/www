#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
// var debug = require('debug')('api:server');
var http = require('http');
var https = require('https');
var config = require('config');
var fs = require('fs');
var errorHandler = require('../error_handler');
var logger = require('../logger');
var DbHelper = require('../lib/DbHelper');
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
var sslPort = 80;

  

app.set('port', port);
app.set('sslPort', sslPort);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

if(process.env.NODE_ENV === "production"){
  var sslOptions = {
    key: fs.readFileSync(config.get("sslKey")),
    cert: fs.readFileSync(config.get("sslCert"))
  }

  var sslServer = https.createServer(sslOptions, app);
  sslServer.listen(sslPort);
  sslServer.on('error', onErrorSsl);
  sslServer.on('listening', onListeningSsl);
}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.log_and_exit('error', bind + ' requires elevated privileges', 1);
      break;
    case 'EADDRINUSE':
      logger.log_and_exit('error', bind + ' is already in use', 1);
      break;
    default:
      throw error;
  }
}

function onErrorSsl(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof sslPort === 'string'
    ? 'Pipe ' + sslPort
    : 'Port ' + sslPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.log_and_exit('error', bind + ' requires elevated privileges', 1);
      break;
    case 'EADDRINUSE':
      logger.log_and_exit('error', bind + ' is already in use', 1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  // debug('Listening on ' + bind);
  logger.info('Listening on ' + bind);
}

function onListeningSsl() {
  var addr = sslServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  // debug('Listening on ' + bind);
  logger.info('Listening on ' + bind);
}

process.on('SIGINT', function() {
  process.exit();
});

process.on('message', function(msg) {
  if (msg == 'shutdown') {
    DbHelper.closeAllConnections().then(
      function(success){
        var msg = 'message shutdown: Closed all db connections';
        errorHandler.handleErrorAndExit(msg, 0, 'info');
      },
      function(err){
        err.isOperational = false;
        errorHandler.handleErrorAndExit(err, 1);
      }
    );
  }
});


process.on('unhandledRejection', function (reason, p) {
  reason.isOperational = false;
  errorHandler.handleErrorAndExit(reason, 1);
});

process.on('uncaughtException', function(error) {
  error.isOperational = false;
  errorHandler.handleErrorAndExit(error, 1);  
});


process.on('warning', (warning) => {
  warning.isOperational = false;
  logger.error(warning);
});